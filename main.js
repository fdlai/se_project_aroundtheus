!function(){"use strict";class t{constructor(t,e,s,i,r){this._data=t,this._name=t.name,this._link=t.link,this.id=t._id,this._cardSelector=e,this._handleImageClick=s,this._handleTrashButtonClick=i,this._handleLikeButtonClick=r,this._template=document.querySelector(this._cardSelector).content,this._cardTemplate=this._template.querySelector(".card"),this._cardElement=this._cardTemplate.cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._likeButtonStateActive=t.isLiked,this._setLikeButtonState()}_addLikeFunctionality(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButtonClick(this,this._likeButtonStateActive),this._likeButtonStateActive=!this._likeButtonStateActive,this._setLikeButtonState()}))}_setLikeButtonState(){this._likeButtonStateActive?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}deleteCard(){this._errorCard&&this._errorCard.remove(),this._cardElement.remove()}_setEventListeners(){this._addLikeFunctionality(),this._deleteButton.addEventListener("click",(()=>{this._handleTrashButtonClick(this)})),this._cardElementImage.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_replaceWithErrorCard(){this._errorMessage="Image has failed to load",this._errorCardTemplate=document.querySelector("#error-card-template").content.firstElementChild,this._errorCard=this._errorCardTemplate.cloneNode(!0),this._errorCardMessage=this._errorCard.querySelector(".card__error-message"),this._errorDeleteButton=this._errorCard.querySelector(".card__delete-button"),this._errorCardTitle=this._errorCard.querySelector(".card__title"),this._errorCardMessage.textContent=this._errorMessage,this._errorCardTitle.textContent=this._cardElement.innerText?this._cardElement.textContent:"...",this._errorDeleteButton.addEventListener("click",(()=>{this._handleTrashButtonClick(this)})),this._cardElement.replaceWith(this._errorCard)}getCardElement(){return this._cardElementTitle=this._cardElement.querySelector(".card__title"),this._cardElementImage=this._cardElement.querySelector(".card__image"),this._cardElementTitle.textContent=this._name,this._cardElementImage.setAttribute("src",`${this._link}`),this._cardElementImage.setAttribute("alt",`${this._name}`),this._setEventListeners(),this._cardElementImage.onerror=()=>this._replaceWithErrorCard(),this._cardElement}}class e{constructor(t,e){this._settings=t,this._form=e,this._inputs=[...this._form.querySelectorAll(this._settings.inputSelector)],this._submitButton=this._form.querySelector(this._settings.submitButtonSelector)}_checkAllFormInputsAreValid(){return this._inputs.every((t=>t.validity.valid))}disableSubmitButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_toggleSubmitButton(){this._checkAllFormInputsAreValid()?this.enableSubmitButton():this.disableSubmitButton()}_showErrorMessage(t){const e=this._form.querySelector(`#${t.id}-error`);e.textContent=t.validationMessage,e.classList.add(this._settings.errorClass),t.classList.add(this._settings.inputErrorClass)}_hideErrorMessage(t){this._form.querySelector(`#${t.id}-error`).classList.remove(this._settings.errorClass),t.classList.remove(this._settings.inputErrorClass)}_handleErrorVisibility(t){t.validity.valid?this._hideErrorMessage(t):this._showErrorMessage(t)}resetFormValidation(){(!(arguments.length>0&&void 0!==arguments[0])||arguments[0])&&this._form.reset(),this._toggleSubmitButton(),this._inputs.forEach((t=>{this._hideErrorMessage(t)}))}enableValidation(){this._inputs.forEach((t=>{t.addEventListener("input",(e=>{this._toggleSubmitButton(),this._handleErrorVisibility(t)}))}))}}class s{constructor(t,e){let s=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];this._textSelector=t,this._tooltipSelector=e,this._updateText=s}handleTooltip(){document.querySelectorAll(this._textSelector).forEach((t=>{const e=t.scrollWidth>t.clientWidth,s=t.parentNode.querySelector(this._tooltipSelector);if(e&&!s){const e=document.createElement("p");e.classList.add(this._tooltipSelector.slice(1)),e.textContent=t.textContent,t.after(e)}else e&&s&&this._updateText?t.nextElementSibling.textContent=t.innerText:!e&&s&&t.nextElementSibling.remove()}))}}class i{constructor(t,e){let{items:s,renderer:i}=t;this._items=s,this._renderer=i,this._container=document.querySelector(e)}renderItems(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"append";this._items.forEach((e=>{this.addItem(e,t)}))}addItem(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";const s=this._renderer(t);switch(e){case"append":this._container.append(s);break;case"prepend":this._container.prepend(s);break;default:console.log("Error. Please use only 'append' or 'prepend'.")}}}class r{constructor(t){this._popupSelector=t,this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}_clickToCloseModal(t){t.target!==this._popupElement&&t.target!==this._closeButton||this.close()}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(t=>{this._clickToCloseModal(t)}))}}class o extends r{constructor(t,e){super(t),this._handleFormSubmit=e,this._formElement=this._popupElement.querySelector(".modal__form"),this._inputObject={},this._inputElements=[...this._popupElement.querySelectorAll(".modal__input")],this._submitButton=this._popupElement.querySelector(".modal__submit-button"),this._defaultSubmitButtonText=this._submitButton.textContent,this.setEventListeners()}getInputElements(){return this._inputElements}_getInputValues(){return this._inputElements.forEach((t=>{this._inputObject[t.name]=t.value})),this._inputObject}setInputValues(t){this._inputElements.forEach((e=>{e.value=t[e.name]}))}getInputElementAttributeNames(){const t=[];return this._inputElements.forEach((e=>{t.push(e.name)})),t}_changeSubmitButtonText(t){this._submitButton.textContent=t}async applySavingAnimation(t){function e(t){return new Promise((e=>setTimeout(e,t)))}this._submitButton.classList.add("modal__submit-button_hover_disabled"),this._submitButton.classList.add("modal__submit-button_animation_active");const[s,i]=await Promise.all([t,e(1200)]);return this._submitButton.classList.remove("modal__submit-button_animation_active"),this._submitButton.classList.add("modal__submit-button_saved"),await e(180),this._submitButton.classList.remove("modal__submit-button_hover_disabled"),s}open(){this._submitButton.textContent!==this._defaultSubmitButtonText&&this._changeSubmitButtonText(this._defaultSubmitButtonText),this._submitButton.classList.contains("modal__submit-button_saved")&&this._submitButton.classList.remove("modal__submit-button_saved"),super.open()}setEventListeners(){this._formElement.addEventListener("submit",(async t=>{t.preventDefault(),await this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},a=document.querySelector("#profile-edit-button"),l=document.querySelector("#profile-add-button"),c=document.querySelector(".profile__image"),d={},h=new class{constructor(t){this._apiSettings=t,this._headers=t.headers,this._baseUrl=t.baseUrl,this._userInfoUrl=`${this._baseUrl}/users/me`,this._cardsUrl=`${this._baseUrl}/cards`,this._avatarUrl=`${this._userInfoUrl}/avatar`}_checkResponse(t){if(!t.ok)throw t}async getInitialCards(){try{const t=await fetch(this._cardsUrl,{headers:this._headers});this._checkResponse(t);const e=await t.json();return console.log(e),e}catch(t){throw console.log("Failed to get cards: ",t),new Error(t.status)}}async addArrayOfCards(t){t.forEach((async t=>{this.addCard(t)}))}async addCard(t){try{const e=await fetch(this._cardsUrl,{method:"POST",headers:this._headers,body:JSON.stringify(t)});this._checkResponse(e);const s=await e.json();return console.log(s),s}catch(e){throw console.error("Error! Could not add a card: ",e,t),new Error(e.status)}}async deleteCard(t){try{const e=await fetch(`${this._cardsUrl}/${t}`,{method:"DELETE",headers:this._headers});this._checkResponse(e);const s=await e.json();return console.log(s),e}catch(e){throw console.log("Failed to delete card: ",e,t),new Error(e.status)}}async likeCard(t){try{const e=await fetch(`${this._cardsUrl}/${t}/likes`,{method:"PUT",headers:this._headers});this._checkResponse(e);const s=await e.json();return console.log(s),e}catch(e){throw console.log("Error! Failed to like button: ",e,t),new Error(e.status)}}async unlikeCard(t){try{const e=await fetch(`${this._cardsUrl}/${t}/likes`,{method:"DELETE",headers:this._headers});this._checkResponse(e);const s=await e.json();return console.log(s),e}catch(e){throw console.log("Error! Failed to unlike button: ",e,t),new Error(e.status)}}async fetchUserInfo(){try{const t=await fetch(this._userInfoUrl,{headers:this._headers});this._checkResponse(t);const e=await t.json();return console.log(e),e}catch(t){throw console.log("Failed to get user info: ",t),new Error(t.status)}}async updateUserInfo(t,e){try{const s=await fetch(this._userInfoUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:e})});this._checkResponse(s);const i=await s.json();return console.log(i),i}catch(s){throw console.log("Failed to update user info: ",s,t,e),new Error(s.status)}}async changeAvatar(t){try{const e=await fetch(this._avatarUrl,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})});this._checkResponse(e);const s=await e.json();return console.log(s),s}catch(e){throw console.log("Could not change avatar image: ",e,t),new Error(e.status)}}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"cb8f3768-1e1a-47c8-a0f6-f4754f9bab87","Content-Type":"application/json"}}),u=new s(".card__title",".card__tooltip",!1),_=new s("#profile-title",".profile__tooltip-title"),m=new s("#profile-description",".profile__tooltip-description");let p;const E=new o("#modal-edit-profile",(async function(t){let{title:e,description:s}=t;try{const t=h.updateUserInfo(e,s);await E.applySavingAnimation(t),S.setUserInfo({userName:e,userDescription:s}),_.handleTooltip(),m.handleTooltip()}catch(t){v.setMessage(`${t}. Error setting user info.`),v.open()}})),g=new o("#modal-add-card",(async function(t){let{title:e,imageLink:s}=t;try{const t={name:e,link:s},i=h.addCard(t),r=await g.applySavingAnimation(i);p.addItem(r,"prepend"),u.handleTooltip(),d["modal-add-card-form"].resetFormValidation(!0)}catch(t){v.setMessage(`${t}. Could not add card.`),v.open()}})),b=new class extends r{constructor(t){super(t),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupTitle=this._popupElement.querySelector(".modal__subtitle"),this.setEventListeners()}open(t){let{name:e,link:s}=t;this._popupImage.src=s,this._popupImage.alt=e,this._popupTitle.textContent=e,this._popupImage.onload=()=>{super.open()}}}("#modal-picture"),f=new class extends r{constructor(t){super(t),this._submitButton=this._popupElement.querySelector(".modal__submit-button"),this._form=this._popupElement.querySelector(".modal__form"),this._setEventListeners()}setSubmitHandler(t){this._submitHandler=t}_setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._submitHandler?this._submitHandler():console.log("submitHandler has not been set"),this.close()}))}}("#modal-card-delete"),y=new o("#modal-profile-picture",(async function(t){try{const e=h.changeAvatar(t.imageLink);await y.applySavingAnimation(e),S.setUserInfo({userImageUrl:t.imageLink}),d["modal-profile-picture-form"].resetFormValidation(!0)}catch(t){v.setMessage(`${t}. Could not change profile picture.`),v.open()}})),v=new class extends r{constructor(t){super(t),this._textMessage=this._popupElement.querySelector(".modal__heading"),this.setEventListeners()}setMessage(t){this._textMessage.textContent=t}}("#modal-message"),S=new class{constructor(t,e,s){this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(e),this._imageElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent.trim(),description:this._descriptionElement.textContent.trim(),imageLink:this._imageElement.src}}setUserInfo(t){let{userName:e,userDescription:s,userImageUrl:i}=t;e&&(this._nameElement.textContent=e),s&&(this._descriptionElement.textContent=s),i&&(this._imageElement.src=i),this._imageElement.onerror=()=>{this._imageElement.src="./8b4523932e498ee19285.png",alert("Invalid URL. Could not change image!")}}}("#profile-title","#profile-description",".profile__image");function C(e){const s=new t(e,"#card-template",(t=>b.open(t)),k,w);return s.getCardElement()}async function k(t){try{f.open(),f.setSubmitHandler((async()=>{await h.deleteCard(t.id),t.deleteCard()}))}catch(t){v.setMessage(`${t}. Could not delete card.`),v.open()}}async function w(t,e){try{e?h.unlikeCard(t.id):h.likeCard(t.id)}catch(t){v.setMessage(`${t}. Could not like/unlike card.`),v.open()}}a.addEventListener("click",(()=>{const t=S.getUserInfo(),e={title:t.name,description:t.description};E.setInputValues(e),d["modal-profile-form"].resetFormValidation(!1),E.open()})),l.addEventListener("click",(()=>{g.open()})),window.addEventListener("resize",(()=>{u.handleTooltip(),_.handleTooltip(),m.handleTooltip()})),c.addEventListener("click",(()=>{y.open()})),Promise.all([async function(){try{const t=await h.getInitialCards();p=new i({items:t,renderer:C},".cards__list"),p.renderItems()}catch(t){v.setMessage(`${t}. Could not retrieve cards.`),v.open()}}(),async function(){try{const t=await h.fetchUserInfo();S.setUserInfo({userName:t.name,userDescription:t.about,userImageUrl:t.avatar})}catch(t){v.setMessage(`${t}. Could not retrieve user info.`),v.open()}}()]).then((()=>{var t;u.handleTooltip(),_.handleTooltip(),m.handleTooltip(),t=n,[...document.querySelectorAll(t.formSelector)].forEach((s=>{const i=new e(t,s),r=s.getAttribute("name");d[r]=i,i.enableValidation()}))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,