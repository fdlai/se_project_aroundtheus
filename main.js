!function(){"use strict";class t{constructor(t,e,i){this._data=t,this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=i,this._template=document.querySelector(this._cardSelector).content,this._cardTemplate=this._template.querySelector(".card"),this._cardElement=this._cardTemplate.cloneNode(!0),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button")}_addLikeFunctionality(){this._likeButton.addEventListener("click",(()=>{this._likeButton.classList.toggle("card__like-button_active")}))}_addDeleteFunctionality(t,e){t.addEventListener("click",(()=>{e.remove()}))}_setEventListeners(){this._addLikeFunctionality(),this._addDeleteFunctionality(this._deleteButton,this._cardElement),this._cardElementImage.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}_replaceWithErrorCard(){this._errorMessage="Image has failed to load",this._errorCardTemplate=document.querySelector("#error-card-template").content.firstElementChild,this._errorCard=this._errorCardTemplate.cloneNode(!0),this._errorCardMessage=this._errorCard.querySelector(".card__error-message"),this._errorDeleteButton=this._errorCard.querySelector(".card__delete-button"),this._errorCardTitle=this._errorCard.querySelector(".card__title"),this._errorCardMessage.textContent=this._errorMessage,this._errorCardTitle.textContent=this._cardElement.innerText?this._cardElement.textContent:"...",this._addDeleteFunctionality(this._errorDeleteButton,this._errorCard),this._cardElement.replaceWith(this._errorCard)}getCardElement(){return this._cardElementTitle=this._cardElement.querySelector(".card__title"),this._cardElementImage=this._cardElement.querySelector(".card__image"),this._cardElementTitle.textContent=this._name,this._cardElementImage.setAttribute("src",`${this._link}`),this._cardElementImage.setAttribute("alt",`${this._name}`),this._setEventListeners(),this._cardElementImage.onerror=()=>this._replaceWithErrorCard(),this._cardElement}}class e{constructor(t,e){this._settings=t,this._form=e,this._inputs=[...this._form.querySelectorAll(this._settings.inputSelector)],this._submitButton=this._form.querySelector(this._settings.submitButtonSelector)}_checkAllFormInputsAreValid(){return this._inputs.every((t=>t.validity.valid))}disableSubmitButton(){this._submitButton.classList.add(this._settings.inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){this._submitButton.classList.remove(this._settings.inactiveButtonClass),this._submitButton.disabled=!1}_toggleSubmitButton(){this._checkAllFormInputsAreValid()?this.enableSubmitButton():this.disableSubmitButton()}_showErrorMessage(t){const e=this._form.querySelector(`#${t.id}-error`);e.textContent=t.validationMessage,e.classList.add(this._settings.errorClass),t.classList.add(this._settings.inputErrorClass)}_hideErrorMessage(t){this._form.querySelector(`#${t.id}-error`).classList.remove(this._settings.errorClass),t.classList.remove(this._settings.inputErrorClass)}_handleErrorVisibility(t){t.validity.valid?this._hideErrorMessage(t):this._showErrorMessage(t)}resetFormValidation(){(!(arguments.length>0&&void 0!==arguments[0])||arguments[0])&&this._form.reset(),this._toggleSubmitButton(),this._inputs.forEach((t=>{this._hideErrorMessage(t)}))}enableValidation(){this._inputs.forEach((t=>{t.addEventListener("input",(e=>{this._toggleSubmitButton(),this._handleErrorVisibility(t)}))}))}}class i{constructor(t,e){let i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];this._textSelector=t,this._tooltipSelector=e,this._updateText=i}handleTooltip(){document.querySelectorAll(this._textSelector).forEach((t=>{const e=t.scrollWidth>t.clientWidth,i=t.parentNode.querySelector(this._tooltipSelector);if(e&&!i){const e=document.createElement("p");e.classList.add(this._tooltipSelector.slice(1)),e.textContent=t.textContent,t.after(e)}else e&&i&&this._updateText?t.nextElementSibling.textContent=t.innerText:!e&&i&&t.nextElementSibling.remove()}))}}class s{constructor(t){this._popupSelector=t,this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){document.addEventListener("keydown",this._handleEscClose),this._popupElement.classList.add("modal_opened")}close(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.classList.remove("modal_opened")}_clickToCloseModal(t){t.target!==this._popupElement&&t.target!==this._closeButton||this.close()}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",(t=>{this._clickToCloseModal(t)}))}}class r extends s{constructor(t,e){super(t),this._handleFormSubmit=e,this._formElement=this._popupElement.querySelector(".modal__form"),this._inputObject={},this._inputElements=[...this._popupElement.querySelectorAll(".modal__input")],this.setEventListeners()}getInputElements(){return this._inputElements}_getInputValues(){return this._inputElements.forEach((t=>{this._inputObject[t.name]=t.value})),this._inputObject}setInputValues(t){this._inputElements.forEach((e=>{e.value=t[e.name]}))}getInputElementAttributeNames(){const t=[];return this._inputElements.forEach((e=>{t.push(e.name)})),t}setEventListeners(){this._formElement.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}}const n=document.querySelector("#profile-edit-button"),o=document.querySelector("#profile-add-button"),l={},a=new i(".card__title",".card__tooltip",!1),d=new i("#profile-title",".profile__tooltip-title"),c=new i("#profile-description",".profile__tooltip-description"),_=new class{constructor(t,e){let{items:i,renderer:s}=t;this._items=i,this._renderer=s,this._container=document.querySelector(e)}renderItems(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"append";this._items.forEach((e=>{this.addItem(e,t)}))}addItem(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";const i=this._renderer(t);switch(e){case"append":this._container.append(i);break;case"prepend":this._container.prepend(i);break;default:console.log("Error. Please use only 'append' or 'prepend'.")}}}({items:[{name:"El Capitan",link:"https://images.unsplash.com/photo-1426604966848-d7adac402bff?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1000&q=80"},{name:"Wanaka, New Zealand",link:"https://www.wallpaperup.com/uploads/wallpapers/2013/09/25/151365/348f3c49b5e5d78bae772578dc1e9d36.jpg"},{name:"Lake AtitlÃ¡n",link:"https://www.roadaffair.com/wp-content/uploads/2017/10/lake-atitlan-guatemala-shutterstock_189649244.jpg"},{name:"Banff, Canada",link:"https://i2.wp.com/www.erikastravels.com/wp-content/uploads/2015/11/P1170327.jpg"},{name:"Grand Canyon",link:"https://www.wallpaperflare.com/static/15/193/266/arches-national-park-utah-rock-nature-wallpaper.jpg"},{name:"Amazon Rainforest",link:"https://foundtheworld.com/wp-content/uploads/2015/12/Amazon-Rainforest-9.jpg"}],renderer:function(e){return new t(e,"#card-template",(t=>p.open(t))).getCardElement()}},".cards__list"),h=new r("#modal-edit-profile",(function(t){let{title:e,description:i}=t;m.setUserInfo(e,i),d.handleTooltip(),c.handleTooltip()})),u=new r("#modal-add-card",(function(t){let{title:e,imageLink:i}=t;_.addItem({name:e,link:i},"prepend"),a.handleTooltip(),l["modal-add-card-form"].resetFormValidation(!0)})),p=new class extends s{constructor(t){super(t),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupTitle=this._popupElement.querySelector(".modal__subtitle"),this.setEventListeners()}open(t){let{name:e,link:i}=t;this._popupImage.src=i,this._popupImage.alt=e,this._popupTitle.textContent=e,this._popupImage.onload=()=>{super.open()}}}("#modal-picture"),m=new class{constructor(t,e){this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(e)}getUserInfo(){return{name:this._nameElement.textContent.trim(),description:this._descriptionElement.textContent.trim()}}setUserInfo(t,e){this._nameElement.textContent=t,this._descriptionElement.textContent=e}}("#profile-title","#profile-description");var E;n.addEventListener("click",(()=>{const t=m.getUserInfo(),e={title:t.name,description:t.description};h.setInputValues(e),l["modal-profile-form"].resetFormValidation(!1),h.open(),console.log(h.getInputElementAttributeNames()),console.log(u.getInputElementAttributeNames())})),o.addEventListener("click",(()=>{u.open()})),window.addEventListener("resize",(()=>{a.handleTooltip(),d.handleTooltip(),c.handleTooltip()})),_.renderItems(),E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},[...document.querySelectorAll(E.formSelector)].forEach((t=>{const i=new e(E,t),s=t.getAttribute("name");l[s]=i,i.enableValidation()})),a.handleTooltip(),d.handleTooltip(),c.handleTooltip()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,